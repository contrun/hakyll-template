name: Hakyll site CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: [ '8.8.3' ]
        cabal: [ '3.0' ]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      name: Cache ~/.npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - uses: actions/setup-node@v1
    - run: npm install

    - uses: actions/setup-haskell@v1
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: cabal-store-${{ runner.OS }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: |
          cabal-store-${{ runner.OS }}-${{ matrix.ghc }}-
          cabal-store-${{ runner.OS }}-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: dist-newstyle-${{ runner.OS }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: |
          dist-newstyle-${{ runner.OS }}-${{ matrix.ghc }}-
          dist-newstyle-${{ runner.OS }}-
    - name: Update the package list
      run: |
        cabal update
    - name: Build dependencies and the site generator
      run: |
        cabal build
    - name: Build the site
      env:
        LANG: en_US.UTF-8
      # build it two times to generate the correct metadata
      run: |
        cabal exec site -- build
        cabal exec site -- build
    - name: Check the site output
      run: |
        cabal exec site -- check

    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages

    - name: Build docker image, push it to docker hub
      run: |
        set -x
        [[ -z "$DOCKER_HUB_USERNAME" ]] && DOCKER_HUB_USERNAME="$(awk -F / '{print $1}' <<< "$GITHUB_REPOSITORY")"
        [[ -z "$PACKAGE_NAME" ]] && PACKAGE_NAME="$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
        DOCKER_TAG="$(find .github/workflows .gitlab-ci.yml stack.yaml *.cabal Dockerfile | LC_ALL=C sort | cpio -o --quiet | sha512sum | cut -c 1-128)"
        DOCKER_HUB_URL="$DOCKER_HUB_USERNAME/$PACKAGE_NAME"
        DOCKER_IMAGE="$DOCKER_HUB_URL:$DOCKER_TAG"
        DOCKER_IMAGE_LATEST="$DOCKER_HUB_URL:latest"
        echo ::set-env "name=DOCKER_IMAGE::$DOCKER_IMAGE"
        echo ${{secrets.DOCKER_HUB_TOKEN}} | docker login -u $DOCKER_HUB_USERNAME --password-stdin
        docker pull "$DOCKER_IMAGE" && exit 0
        docker build -t "$DOCKER_IMAGE" .
        docker push "$DOCKER_IMAGE"
        docker build -t "$DOCKER_IMAGE_LATEST" .
        docker push "$DOCKER_IMAGE_LATEST"
